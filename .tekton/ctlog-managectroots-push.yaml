apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  annotations:
    build.appstudio.openshift.io/repo: https://github.com/securesign/scaffolding?rev={{revision}}
    build.appstudio.redhat.com/commit_sha: '{{revision}}'
    build.appstudio.redhat.com/target_branch: '{{target_branch}}'
    pipelinesascode.tekton.dev/max-keep-runs: "3"
    pipelinesascode.tekton.dev/on-cel-expression: event == "push" && target_branch == "main" && 
      ( "cmd/ctlog/managectroots/*".pathChanged() || ".tekton/ctlog-managectroots-push.yaml".pathChanged() || "Dockerfile.ctlog-managectroots.rh".pathChanged() || "go.mod".pathChanged() || "Makefile".pathChanged() || "trigger-konflux-builds.txt".pathChanged() )
  creationTimestamp: null
  labels:
    appstudio.openshift.io/application: scaffold
    appstudio.openshift.io/component: ctlog-managectroots
    pipelines.appstudio.openshift.io/type: build
  name: ctlog-managectroots-on-push
  namespace: rhtas-tenant
spec:
  params:
  - name: dockerfile
    value: Dockerfile.ctlog-managectroots.rh
  - name: git-url
    value: '{{repo_url}}'
  - name: output-image
    value: quay.io/securesign/scaffold-ctlog-managectroots:{{revision}}
  - name: path-context
    value: .
  - name: revision
    value: '{{revision}}'
  - name: prefetch-input
    value: '{"type": "gomod", "path": "."}'
  - name: hermetic
    value: "true"
  - name: build-source-image
    value: "true"
  - name: go_unit_test
    value: true
  - name: go_test_command
    value: go test $(go list ./... | grep -v 'third_party/VENDOR-LICENSE/github.com/letsencrypt/boulder/goodkey')
  taskRunSpecs:
    - pipelineTaskName: prefetch-dependencies
      stepSpecs:
        - name: prefetch-dependencies
          computeResources:
            requests:
              cpu: '3'
              memory: 3Gi
            limits:
              cpu: '3'
              memory: 3Gi
    - pipelineTaskName: run-unit-test
      stepSpecs:
        - name: run-tests
          computeResources:
            requests:
              cpu: '3'
              memory: 3Gi
            limits:
              cpu: '3'
              memory: 3Gi
  pipelineRef:
    resolver: git
    params:
      - name: url
        value: 'https://github.com/securesign/pipelines.git'
      - name: revision
        value: 'main'
      - name: pathInRepo
        value: 'pipelines/docker-build-oci-ta.yaml'
  taskRunTemplate: {}
  workspaces:
  - name: workspace
    volumeClaimTemplate:
      metadata:
        creationTimestamp: null
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
      status: {}
  - name: git-auth
    secret:
      secretName: '{{ git_auth_secret }}'
status: {}
